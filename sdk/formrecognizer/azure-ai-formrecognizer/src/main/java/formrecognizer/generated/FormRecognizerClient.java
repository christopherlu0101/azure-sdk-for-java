// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package formrecognizer.generated;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import formrecognizer.generated.models.AnalyzeLayoutAsyncResponse;
import formrecognizer.generated.models.AnalyzeLayoutAsyncWithJpegResponse;
import formrecognizer.generated.models.AnalyzeLayoutAsyncWithPdfResponse;
import formrecognizer.generated.models.AnalyzeLayoutAsyncWithPngResponse;
import formrecognizer.generated.models.AnalyzeLayoutAsyncWithTiffResponse;
import formrecognizer.generated.models.AnalyzeOperationResult;
import formrecognizer.generated.models.AnalyzeReceiptAsyncResponse;
import formrecognizer.generated.models.AnalyzeReceiptAsyncWithJpegResponse;
import formrecognizer.generated.models.AnalyzeReceiptAsyncWithPdfResponse;
import formrecognizer.generated.models.AnalyzeReceiptAsyncWithPngResponse;
import formrecognizer.generated.models.AnalyzeReceiptAsyncWithTiffResponse;
import formrecognizer.generated.models.AnalyzeWithCustomModelResponse;
import formrecognizer.generated.models.Model;
import formrecognizer.generated.models.ModelsModel;
import formrecognizer.generated.models.TrainCustomModelAsyncResponse;
import formrecognizer.generated.models.TrainRequest;
import java.util.UUID;
import reactor.core.publisher.Mono;

/**
 * The interface for FormRecognizerClient class.
 */
public interface FormRecognizerClient {
    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    String getEndpoint();

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    HttpPipeline getHttpPipeline();

    /**
     * Train Custom Model
     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.
     *
     * @param trainRequest Training request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<TrainCustomModelAsyncResponse> trainCustomModelAsyncWithRestResponseAsync(TrainRequest trainRequest);

    /**
     * Train Custom Model
     * Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.
     *
     * @param trainRequest Training request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> trainCustomModelAsyncAsync(TrainRequest trainRequest);

    /**
     * List Custom Models
     * Get information about all custom models.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<ModelsModel>> getCustomModelsWithRestResponseAsync();

    /**
     * List Custom Models
     * Get information about all custom models.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ModelsModel> getCustomModelsAsync();

    /**
     * List Custom Models
     * Get information about all custom models.
     *
     * @param op Specify whether to return summary or full list of models. Possible values include: 'full', 'summary'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<ModelsModel>> getCustomModelsWithRestResponseAsync(String op);

    /**
     * List Custom Models
     * Get information about all custom models.
     *
     * @param op Specify whether to return summary or full list of models. Possible values include: 'full', 'summary'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<ModelsModel> getCustomModelsAsync(String op);

    /**
     * Get Custom Model
     * Get detailed information about a custom model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Model>> getCustomModelWithRestResponseAsync(UUID modelId);

    /**
     * Get Custom Model
     * Get detailed information about a custom model.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Model> getCustomModelAsync(UUID modelId);

    /**
     * Get Custom Model
     * Get detailed information about a custom model.
     *
     * @param modelId Model identifier.
     * @param includeKeys Include list of extracted keys in model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Model>> getCustomModelWithRestResponseAsync(UUID modelId, Boolean includeKeys);

    /**
     * Get Custom Model
     * Get detailed information about a custom model.
     *
     * @param modelId Model identifier.
     * @param includeKeys Include list of extracted keys in model information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Model> getCustomModelAsync(UUID modelId, Boolean includeKeys);

    /**
     * Delete Custom Model
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> deleteCustomModelWithRestResponseAsync(UUID modelId);

    /**
     * Delete Custom Model
     * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> deleteCustomModelAsync(UUID modelId);

    /**
     * Analyze Form
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeWithCustomModelResponse> analyzeWithCustomModelWithRestResponseAsync(UUID modelId);

    /**
     * Analyze Form
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param modelId Model identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeWithCustomModelAsync(UUID modelId);

    /**
     * Analyze Form
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param modelId Model identifier.
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeWithCustomModelResponse> analyzeWithCustomModelWithRestResponseAsync(UUID modelId, Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Form
     * Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param modelId Model identifier.
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeWithCustomModelAsync(UUID modelId, Boolean includeTextDetails, Object fileStream);

    /**
     * Get Analyze Form Result
     * Obtain current status and the result of the analyze form operation.
     *
     * @param modelId Model identifier.
     * @param resultId Analyze operation result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<AnalyzeOperationResult>> getAnalyzeFormResultWithRestResponseAsync(UUID modelId, UUID resultId);

    /**
     * Get Analyze Form Result
     * Obtain current status and the result of the analyze form operation.
     *
     * @param modelId Model identifier.
     * @param resultId Analyze operation result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeOperationResult> getAnalyzeFormResultAsync(UUID modelId, UUID resultId);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncResponse> analyzeReceiptAsyncWithRestResponseAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncResponse> analyzeReceiptAsyncWithRestResponseAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Get Analyze Receipt Result
     * Track the progress and obtain the result of the analyze receipt operation.
     *
     * @param resultId Analyze operation result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<AnalyzeOperationResult>> getAnalyzeReceiptResultWithRestResponseAsync(UUID resultId);

    /**
     * Get Analyze Receipt Result
     * Track the progress and obtain the result of the analyze receipt operation.
     *
     * @param resultId Analyze operation result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeOperationResult> getAnalyzeReceiptResultAsync(UUID resultId);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncResponse> analyzeLayoutAsyncWithRestResponseAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncResponse> analyzeLayoutAsyncWithRestResponseAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncAsync(Object fileStream);

    /**
     * Get Analyze Layout Result
     * Track the progress and obtain the result of the analyze layout operation.
     *
     * @param resultId Analyze operation result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<AnalyzeOperationResult>> getAnalyzeLayoutResultWithRestResponseAsync(UUID resultId);

    /**
     * Get Analyze Layout Result
     * Track the progress and obtain the result of the analyze layout operation.
     *
     * @param resultId Analyze operation result identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeOperationResult> getAnalyzeLayoutResultAsync(UUID resultId);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithJpegResponse> analyzeReceiptAsyncWithJpegWithRestResponseAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithJpegAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithJpegResponse> analyzeReceiptAsyncWithJpegWithRestResponseAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithJpegAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithPngResponse> analyzeReceiptAsyncWithPngWithRestResponseAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithPngAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithPngResponse> analyzeReceiptAsyncWithPngWithRestResponseAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithPngAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithTiffResponse> analyzeReceiptAsyncWithTiffWithRestResponseAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithTiffAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithTiffResponse> analyzeReceiptAsyncWithTiffWithRestResponseAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithTiffAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithPdfResponse> analyzeReceiptAsyncWithPdfWithRestResponseAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithPdfAsync();

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeReceiptAsyncWithPdfResponse> analyzeReceiptAsyncWithPdfWithRestResponseAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Receipt
     * Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param includeTextDetails Include text lines and element references in the result.
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeReceiptAsyncWithPdfAsync(Boolean includeTextDetails, Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithJpegResponse> analyzeLayoutAsyncWithJpegWithRestResponseAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithJpegAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithJpegResponse> analyzeLayoutAsyncWithJpegWithRestResponseAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithJpegAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithPngResponse> analyzeLayoutAsyncWithPngWithRestResponseAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithPngAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithPngResponse> analyzeLayoutAsyncWithPngWithRestResponseAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithPngAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithTiffResponse> analyzeLayoutAsyncWithTiffWithRestResponseAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithTiffAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithTiffResponse> analyzeLayoutAsyncWithTiffWithRestResponseAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithTiffAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithPdfResponse> analyzeLayoutAsyncWithPdfWithRestResponseAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithPdfAsync();

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AnalyzeLayoutAsyncWithPdfResponse> analyzeLayoutAsyncWithPdfWithRestResponseAsync(Object fileStream);

    /**
     * Analyze Layout
     * Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path) of the document to be analyzed.
     *
     * @param fileStream .json, .pdf, .jpg, .png or .tiff type file stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> analyzeLayoutAsyncWithPdfAsync(Object fileStream);
}
